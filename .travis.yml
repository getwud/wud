dist: jammy
language: shell
os: linux

env:
  global:
    - CC_TEST_REPORTER_ID=46ef31dae5b656e0f4be410a86bd83bdcf73e7d27ab33a704c197e6fe4bf02a0
    - DOCKER_PLATFORMS=linux/arm/v7,linux/arm64/v8,linux/amd64
    - IMAGE_NAME=wud
    - NODE_VERSION=23

before_install:

  - export IMAGE_VERSION=${TRAVIS_BRANCH//\//\_}
  - export IMAGE_VERSION=${IMAGE_VERSION//\#/\_}
  - export IMAGE_VERSION_MINOR=$(echo $IMAGE_VERSION | sed -rn 's/^(v?[[:digit:]]+.[[:digit:]]+).([[:digit:]]+)(.*)/\1/p')
  - export IMAGE_VERSION_MAJOR=$(echo $IMAGE_VERSION | sed -rn 's/^(v?[[:digit:]]+).[[:digit:]]+.([[:digit:]]+)(.*)/\1/p')

  # Install docker with buildx
  - sudo install -m 0755 -d /etc/apt/keyrings
  - sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
  - sudo chmod a+r /etc/apt/keyrings/docker.asc
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - sudo apt-get update
  - sudo apt-get install -y docker-buildx-plugin
  - docker version

  # Install Nodejs
  - nvm install $NODE_VERSION

  # Init Code Climate
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./app/cc-test-reporter
  - (cd app && chmod +x ./cc-test-reporter)
  - (cd app && ./cc-test-reporter before-build)

install:

  - (cd app && npm ci)
  - (cd e2e && npm ci)
  - (cd ui && npm ci)

script:

  # Fail at first non zero exit code
  - set -e

  # Run Linter
  - (cd app && npm run lint)
  - (cd e2e && npm run lint)
  - (cd ui && npm run lint)

  # Package app
  - (cd app && npm run build)

  # Package ui
  - (cd ui && npm run build)

  # Run UT
  - (cd app && npm test)

  # Report to Code Climate
#  - (cd app && ./cc-test-reporter after-build -t lcov --debug --exit-code $TRAVIS_TEST_RESULT)

  # Build wud docker image
  - docker build -t wud --build-arg WUD_VERSION=$IMAGE_VERSION .

  # Login to private registries
  - docker login registry.gitlab.com -u "$GITLAB_USERNAME" -p "$GITLAB_TOKEN"

  # Pull nginx as a test image
  - docker pull nginx:1.10-alpine
  - docker pull nginx:1.20-alpine

  # Tag nginx 1.10 as latest to simulate an update_available
  - docker tag nginx:1.10-alpine nginx:latest

  # Tag nginx as if it was coming from private Hub, ECR, GCR, ACR...
  - docker tag nginx:1.10-alpine fmartinou/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/sub/test:1.0.0
#  - docker tag nginx:1.10-alpine gcr.io/wud-test/test:1.0.0
#  - docker tag nginx:1.10-alpine gcr.io/wud-test/sub/test:1.0.0
#  - docker tag nginx:1.10-alpine gcr.io/wud-test/sub/sub/test:1.0.0
#  - docker tag nginx:1.10-alpine wudtest.azurecr.io/test:1.0.0
#  - docker tag nginx:1.10-alpine wudtest.azurecr.io/sub/test:1.0.0
#  - docker tag nginx:1.10-alpine wudtest.azurecr.io/sub/sub/test:1.0.0

  # Pull homeassistant
  - docker pull homeassistant/home-assistant
  - docker pull homeassistant/home-assistant:2021.6.1

  # Pull omnidb
  - docker pull omnidbteam/omnidb

  # Pull pihole
  - docker pull pihole/pihole
  - docker pull pihole/pihole:v5.7

  # Pull pyload
  - docker pull writl/pyload

  # Pull traefik
  - docker pull traefik
  - docker pull traefik:2.4.5

  # Pull vaultwarden
  - docker pull vaultwarden/server
  - docker pull vaultwarden/server:1.33.2-alpine

  # Pull youtubedl
  - docker pull jeeaaasustest/youtube-dl

  # Run containers for tests

  # ACR
  #  - docker run -d --name acr_test          --label "wud.watch=true" wudtest.azurecr.io/test:1.0.0
  #  - docker run -d --name acr_sub_test      --label "wud.watch=true" wudtest.azurecr.io/sub/test:1.0.0
  #  - docker run -d --name acr_sub_sub_test  --label "wud.watch=true" wudtest.azurecr.io/sub/sub/test:1.0.0

  # ECR
  - docker run -d --name ecr_sub_sub_test --label 'wud.watch=true' 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/sub/test:1.0.0
  - docker run -d --name ecr_sub_test     --label 'wud.watch=true' 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/test:1.0.0
  - docker run -d --name ecr_test         --label 'wud.watch=true' 229211676173.dkr.ecr.eu-west-1.amazonaws.com/test:1.0.0

  # GCR
  #  - docker run -d --name gcr_test          --label "wud.watch=true" gcr.io/wud-test/test:1.0.0
  #  - docker run -d --name gcr_sub_test      --label "wud.watch=true" gcr.io/wud-test/sub/test:1.0.0
  #  - docker run -d --name gcr_sub_sub_test  --label "wud.watch=true" gcr.io/wud-test/sub/sub/test:1.0.0

  # GHCR
  - docker run -d --name ghcr_radarr              --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+\.\d+\.\d+-ls\d+$'               ghcr.io/linuxserver/radarr:5.14.0.9383-ls245

  # GITLAB
  - docker run -d --name gitlab_test              --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+\.\d+$'                         registry.gitlab.com/manfred-martin/docker-registry-test:1.0.0

  # HUB
  - docker run -d --name hub_homeassistant_202161 --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+.\d+$' --label 'wud.link.template=https://github.com/home-assistant/core/releases/tag/${major}.${minor}.${patch}' homeassistant/home-assistant:2021.6.1
  - docker run -d --name hub_homeassistant_latest --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' homeassistant/home-assistant

  - docker run -d --name hub_nginx_120            --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+-alpine$'                        nginx:1.20-alpine
  - docker run -d --name hub_nginx_latest         --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' nginx

  - docker run -d --name hub_omnidb_latest        --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' omnidbteam/omnidb

  - docker run -d --name hub_pihole_57            --label 'wud.watch=true' --label 'wud.tag.include=^v\d+\.\d+.\d+$'                          pihole/pihole:v5.7
  - docker run -d --name hub_pihole_latest        --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' pihole/pihole

  - docker run -d --name hub_pyload_latest        --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' writl/pyload

#  - docker run -d --name hub_test                 --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+.\d+$'                           fmartinou/test:1.0.0

  - docker run -d --name hub_traefik_245          --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+.\d+$'                           traefik:2.4.5
  - docker run -d --name hub_traefik_latest       --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' traefik

  - docker run -d --name hub_vaultwarden_1222     --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+.\d+-alpine$'                    -e I_REALLY_WANT_VOLATILE_STORAGE=true vaultwarden/server:1.33.2-alpine
  - docker run -d --name hub_vaultwarden_latest   --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' -e I_REALLY_WANT_VOLATILE_STORAGE=true vaultwarden/server

  - docker run -d --name hub_youtubedb_latest     --label 'wud.watch=true' --label 'wud.watch.digest=true' --label 'wud.tag.include=^latest$' jeeaaasustest/youtube-dl

  # LSCR
  - docker run -d --name lscr_radarr              --label 'wud.watch=true' --label 'wud.tag.include=^\d+\.\d+\.\d+\.\d+-ls\d+$'               lscr.io/linuxserver/radarr:5.14.0.9383-ls245

  # QUAY
  - docker run -d --name quay_prometheus          --label 'wud.watch=true' --label 'wud.tag.include=^v\d+\.\d+\.\d+$'                         quay.io/prometheus/prometheus:v2.52.0

  # Run wud docker image
  - >
    docker run -d
    --name wud
    --publish 3000:3000
    --volume /var/run/docker.sock:/var/run/docker.sock
    --env WUD_TRIGGER_MOCK_EXAMPLE_MOCK=mock
    --env WUD_WATCHER_LOCAL_WATCHBYDEFAULT=false
    --env WUD_REGISTRY_ACR_PRIVATE_CLIENTID="$ACR_CLIENT_ID"
    --env WUD_REGISTRY_ACR_PRIVATE_CLIENTSECRET="$ACR_CLIENT_SECRET"
    --env WUD_REGISTRY_ECR_PRIVATE_ACCESSKEYID="$AWS_ACCESSKEY_ID"
    --env WUD_REGISTRY_ECR_PRIVATE_SECRETACCESSKEY="$AWS_SECRET_ACCESSKEY"
    --env WUD_REGISTRY_ECR_PRIVATE_REGION=eu-west-1
    --env WUD_REGISTRY_GCR_PRIVATE_CLIENTEMAIL="$GCR_CLIENT_EMAIL"
    --env WUD_REGISTRY_GCR_PRIVATE_PRIVATEKEY="$GCR_PRIVATE_KEY"
    --env WUD_REGISTRY_GHCR_PRIVATE_USERNAME="$GITHUB_USERNAME"
    --env WUD_REGISTRY_GHCR_PRIVATE_TOKEN="$GITHUB_TOKEN"
    --env WUD_REGISTRY_GITLAB_PRIVATE_TOKEN="$GITLAB_TOKEN"
    --env WUD_REGISTRY_LSCR_PRIVATE_USERNAME="$GITHUB_USERNAME"
    --env WUD_REGISTRY_LSCR_PRIVATE_TOKEN="$GITHUB_TOKEN"
    --env WUD_AUTH_BASIC_JOHN_USER="john"
    --env WUD_AUTH_BASIC_JOHN_HASH='$apr1$8zDVtSAY$62WBh9DspNbUKMZXYRsjS/'
    wud

  # Give wud a little time to fetch all available updates
  - sleep 20

  # Run E2E Tests
  - (cd e2e && npm run cucumber)

  # Override image version with tag name if any
  - export DOCKER_TAGS="-t ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION} -t ghcr.io/${GITHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION}"
  - |
    if [ ! -z "$TRAVIS_TAG" ]
    then
      export DOCKER_TAGS="${DOCKER_TAGS} -t ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION_MAJOR} -t ghcr.io/${GITHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION_MAJOR}"
      export DOCKER_TAGS="${DOCKER_TAGS} -t ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION_MINOR} -t ghcr.io/${GITHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_VERSION_MINOR}"
      export DOCKER_TAGS="${DOCKER_TAGS} -t ${DOCKER_USERNAME}/${IMAGE_NAME}:latest -t ghcr.io/${GITHUB_USERNAME}/${IMAGE_NAME}:latest"
    fi

  # Build & push image
  - docker login         -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  - docker login ghcr.io -u "$GITHUB_USERNAME" -p "$GITHUB_TOKEN"
  - docker buildx create --use
  - echo "Building & pushing ${DOCKER_TAGS}"
  - docker buildx build --push --platform ${DOCKER_PLATFORMS} --build-arg WUD_VERSION=${IMAGE_VERSION} ${DOCKER_TAGS} .
